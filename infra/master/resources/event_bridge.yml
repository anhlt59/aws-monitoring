MonitoringEventBus:
  Type: AWS::Events::EventBus
  Properties:
    Name: ${self:service}-${self:provider.stage}-MonitoringEventBus
    Description: Custom EventBus for monitoring events v1.0.1
    Policy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowLambdaToPutEvents",
            "Effect": "Allow",
            "Principal": {
              "AWS": [
                "772468693720",
                "728171922033"
              ]
            },
            "Action": "events:PutEvents",
            "Resource": "*"
          }
        ]
      }

MonitoringEventRule:
  Type: AWS::Events::Rule
  Properties:
    Name: "${self:service}-MonitoringEventRule"
    Description: Rule to handle monitoring events from various sources v1.0.1
    EventBusName: !Ref MonitoringEventBus
    EventPattern: |
      {
        "source": [
          "aws.cloudwatch",
          "aws.guardduty",
          "aws.health",
          "monitoring.agent.cloudwatch",
          "monitoring.agent.guardduty",
          "monitoring.agent.health",
          "monitoring.agent.logs"
        ]
      }
    State: "ENABLED"
    Targets:
      - Arn: !GetAtt HandleMonitoringEventsLambdaFunction.Arn
        Id: "${self:service}-EventHandler"
        RoleArn: !GetAtt EventBridgeRole.Arn
        DeadLetterConfig:
          Arn: !GetAtt MonitoringEventRuleDLQ.Arn

DeploymentEventRule:
  Type: AWS::Events::Rule
  Properties:
    Name: "${self:service}-DeploymentEventRule"
    Description: Rule to handle cloudformation deployment events (agent & master) v1.0.1
    EventBusName: !Ref MonitoringEventBus
    EventPattern: |
      {
        "source": ["aws.cloudformation"],
        "detail-type": ["CloudFormation Stack Status Change"],
        "detail": {
          "stack-id": [{ "wildcard": "*stack/monitoring*"}]
        }
      }
    State: ENABLED
    Targets:
      - Arn: !GetAtt UpdateDeploymentLambdaFunction.Arn
        Id: "${self:service}-EventHandler"
        RoleArn: !GetAtt EventBridgeRole.Arn
        DeadLetterConfig:
          Arn: !GetAtt MonitoringEventRuleDLQ.Arn

#MonitoringMasterEventRule:
#  Type: AWS::Events::Rule
#  Properties:
#    Name: ${self:service}-MonitoringMasterEventRule
#    Description: Publish monitoring events (from default EventBus) to monitoring EventBus v1.0.1
#    EventBusName: default
#    EventPattern: |
#      {
#        "$or": [
#          {
#            "source": ["aws.guardduty", "aws.health"],
#            "detail-type": ["GuardDuty Finding", "AWS Health Event"]
#          },
#          {
#            "source": ["aws.cloudformation"],
#            "detail-type": ["CloudFormation Stack Status Change"],
#            "detail": {
#              "status-details": {
#                "status": [ { "wildcard": "*COMPLETE" }, { "wildcard": "*FAILED" }]
#              },
#              "stack-id": [{ "wildcard": "*stack/monitoring*"}]
#            }
#          }
#        ]
#      }
#    State: ENABLED
#    Targets:
#      - Arn: !GetAtt MonitoringEventBus.Arn
#        Id: ${self:service}-MonitoringEventBusTarget
#        RoleArn: !GetAtt EventBridgeRole.Arn
#        DeadLetterConfig:
#          Arn: !GetAtt MonitoringEventRuleDLQ.Arn
