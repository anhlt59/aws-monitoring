function:
  name: ${self:service}-${self:provider.stage}-DynamoDBStreamsToRDS
  description: DynamoDB Streams > Lambda > RDS
  handler: src.handlers.stream_dynamo_to_rds.main.handler
  package:
    patterns:
      - src/handlers/stream_dynamo_to_rds/*.py
      - src/models/*.py
      - src/repositories/*.py
      - src/services/sqs.py
      - src/*.py
      - "!src/templates.py"
  maximumRetryAttempts: 0
  events:
    # trigger on DynamoDB streams
    - stream:
        type: dynamodb
        arn:
          Fn::GetAtt: [ DynamoDBTable, StreamArn ]
        filterPatterns:
          - eventName: [ INSERT ]
        batchSize: 100
        batchWindow: 10
#        destinations:
#          # if lambda process fails, send the failed event to a queue for debugging
#          onFailure:
#            arn: !GetAtt DeadLetterQueue.Arn
#            type: sqs
        functionResponseType: ReportBatchItemFailures
        maximumRetryAttempts: 0
        parallelizationFactor: 1
  vpc:
    securityGroupIds: ${self:custom.VPC.SecurityGroupIds}
    subnetIds: ${self:custom.VPC.PrivateSubnetIds}
  environment:
    FUNTION_NAME: ${self:service}-${self:provider.stage}-DynamoDBStreamsToRDS
