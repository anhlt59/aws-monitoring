from typing import Protocol

from src.adapters.db.repositories.agent import AgentQueryResult
from src.adapters.db.repositories.event import EventQueryResult
from src.domain.models import Event
from src.domain.models.agent import Agent, UpdateAgentDTO
from src.domain.models.event import ListEventsDTO


class IAgentRepository(Protocol):
    def get(self, id: str) -> Agent: ...

    def list(self) -> AgentQueryResult: ...

    def create(self, entity: Agent) -> None: ...

    def update(self, id: str, dto: UpdateAgentDTO) -> None: ...

    def delete(self, id: str) -> None: ...

    def exists(self, id: str) -> bool: ...


class IEventRepository(Protocol):
    def get(self, id: str) -> Event: ...

    def list(self, dto: ListEventsDTO | None = None) -> EventQueryResult: ...

    def create(self, entity: Event) -> None: ...

    def delete(self, id: str) -> None: ...
