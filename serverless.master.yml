service: monitoring-master

stages:
  default:
    resolvers:
      aws-resolver:
        type: aws
        profile: ${self:custom.configs.Profile}

provider:
  name: aws
  resolver: aws-resolver
  stage: ${opt:stage, "dev"}
  region: ${opt:region, self:custom.configs.Region}
  stackName: ${self:service}-${self:provider.stage}

  # default tags for all resources
  stackTags:
    Owner: ${self:service}
    Environment: ${self:provider.stage}
  tags: ${self:provider.stackTags}

  # S3 bucket where the artifact is stored
  deploymentBucket:
    name: ${self:custom.configs.S3.DeploymentBucket.Name}
  iam:
    deploymentRole: ${self:custom.configs.IAM.DeploymentRole}

  # config lambda functions
  runtime: python3.12
  logRetentionInDays: ${self:custom.configs.Lambda.LogRetentionInDays}
  memorySize: 256
  timeout: 10
  role: LambdaFunctionRole
  layers:
    - !Ref PythonRequirementsLambdaLayer

  # Default environment for lambda functions
  environment:
    STAGE: ${self:provider.stage}
    POWERTOOLS_LOG_LEVEL: ${self:custom.configs.Lambda.Environment.LOG_LEVEL}
    MONITORING_WEBHOOK_URL: ${self:custom.configs.MonitoringConfigs.MonitoringWebhookUrl}
    DEPLOYMENT_WEBHOOK_URL: ${self:custom.configs.MonitoringConfigs.DeploymentWebhookUrl}
    # references to resources in this template
    AWS_DYNAMODB_TABLE: !Ref DynamoDBTable

plugins:
  - serverless-plugin-utils
  - serverless-python-requirements

useDotenv: true

custom:
  # load the configuration corresponding to a specific $stage
  configs: ${file(infra/master/configs/${self:provider.stage}.yml)}
  # plugins
  pythonRequirements: ${file(infra/master/plugins/python_requirements.yml):pythonRequirements}

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - "!./**"
    - src/common/**/?*.py
    - src/models/**/?*.py
    - src/adapters/**/?*.py

functions:
  HandleMonitoringEvents: ${file(infra/master/functions/HandleMonitoringEvents.yml):function}
  UpdateAgentDeployment: ${file(infra/master/functions/UpdateAgentDeployment.yml):function}
  DailyReport: ${file(infra/master/functions/DailyReport.yml):function}

#  # API -------------------------------------------------------------------------
#  # Events
#  GetEvent: ${file(infra/master/functions/api/Event-GetItem.yml):function}
#  ListEvents: ${file(infra/master/functions/api/Event-ListItems.yml):function}
#
#  # Agents
#  GetAgent: ${file(infra/master/functions/api/Agent-GetItem.yml):function}
#  ListAgents: ${file(infra/master/functions/api/Agent-ListItems.yml):function}
#  UpdateAgent: ${file(infra/master/functions/api/Agent-UpdateItem.yml):function}

resources:
  # -----------------------------------------------------------------------------
  Parameters:
    Stage:
      Type: String
      Default: ${self:provider.stage}
      AllowedValues: [ neos, cm ]
  # -----------------------------------------------------------------------------
  Resources:
    # IAM
    LambdaFunctionRole: ${file(infra/master/resources/iam.yml):LambdaFunctionRole}
    LambdaFunctionPolicy: ${file(infra/master/resources/iam.yml):LambdaFunctionPolicy}
    EventBridgeRole: ${file(infra/master/resources/iam.yml):EventBridgeRole}
    EventBridgePolicy: ${file(infra/master/resources/iam.yml):EventBridgePolicy}
    # EventBridge
    MonitoringEventBus: ${file(infra/master/resources/event_bridge.yml):MonitoringEventBus}
    MonitoringEventRule: ${file(infra/master/resources/event_bridge.yml):MonitoringEventRule}
    DeploymentEventRule: ${file(infra/master/resources/event_bridge.yml):DeploymentEventRule}
    # SQS
    MonitoringEventRuleDLQ: ${file(infra/master/resources/sqs.yml):MonitoringEventRuleDLQ}
    # DynamoDB
    DynamoDBTable: ${file(infra/master/resources/dynamodb.yml):DynamoDBTable}

  # -----------------------------------------------------------------------------
  Outputs: { }
