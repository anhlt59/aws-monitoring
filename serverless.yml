service: denaribots

provider:
  name: aws
  stage: ${opt:stage, "dev"}
  region: ${opt:region, self:custom.default.region}
  stackName: ${self:service}-${self:provider.stage}

  # default tags for all resources
  tags:
    Owner: ${self:service}
    Environment: ${self:provider.stage}

  # S3 bucket where the artifact is stored
  deploymentBucket:
    name: ${file(./serverless/configs/${self:provider.stage}.yml):S3.DeploymentBucket.name}

  # config lambda functions
  runtime: python3.10
  logRetentionInDays: ${self:custom.Lambda.logRetentionInDays}
  memorySize: 256
  timeout: 10
  role: LambdaFunctionRole
  layers:
    - !Ref PythonRequirementsLambdaLayer

  # Default environment for lambda functions
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    LOG_LEVEL: ${self:custom.Lambda.environment.LOG_LEVEL}

    # references to resources in this template
    DYNAMODB_TABLE: !Ref DynamoDBTable
    SQS_MONITOR_123_URL: !Ref MonitorCase123Queue
    SQS_MONITOR_4_URL: !Ref MonitorCase4Queue
    SQS_MONITOR_5_URL: !Ref MonitorCase5Queue
    SQS_MONITOR_6_URL: !Ref MonitorCase6Queue
    SQS_MONITOR_7_URL: !Ref MonitorCase7Queue
    SQS_NOTIFICATION_URL: !Ref NotificationQueue

    # dynamic references to AWS SecretsManager
    # RDS
    DB_PORT: ${self:custom.Secrets.DB_PORT, "3306"}
    DB_DATABASE: ${self:custom.Secrets.DB_DATABASE, "${env:DB_DATABASE}"}
    DB_USERNAME: ${self:custom.RdsLambdaUser, self:custom.RdsDefaultUser}   # if DB_LAMBDA_USERNAME does not exist in SecretsKey, then load DB_USERNAME instead
    DB_PASSWORD: ${self:custom.Secrets.DB_PASSWORD, "${env:DB_PASSWORD}"}
    DB_HOST: ${self:custom.Secrets.DB_HOST, "${env:DB_HOST}"}
    # SORACOM
    SORACOM_ENDPOINT: ${self:custom.Secrets.SORACOM_ENDPOINT, "${env:SORACOM_ENDPOINT}"}
    SORACOM_AUTH_KEY_ID: ${self:custom.Secrets.SORACOM_AUTH_KEY_ID, "${env:SORACOM_AUTH_KEY_ID}"}
    SORACOM_AUTH_KEY_SECRET: ${self:custom.Secrets.SORACOM_AUTH_KEY_SECRET, "${env:SORACOM_AUTH_KEY_SECRET}"}
    # FIREBASE
    FIREBASE_CREDENTIALS: ${self:custom.Secrets.FIREBASE_CREDENTIALS, "${env:FIREBASE_CREDENTIALS}"}
    # SES
    SES_SENDER_ADDRESS: ${self:custom.Secrets.SES_SENDER_ADDRESS, "${env:SES_SENDER_ADDRESS}"}
    # S3
    S3_BUCKET_NAME: ${self:provider.deploymentBucket.name}
    S3_FIRMWARE_INFO_KEY: devices/fw-info.csv

plugins: ${file(./serverless/configs/${self:provider.stage}.yml):plugins}
useDotenv: true

custom:
  # load the configuration coresponding to a specific $stage
  default: ${file(./serverless/configs/${self:provider.stage}.yml):default}
  Lambda: ${file(./serverless/configs/${self:provider.stage}.yml):Lambda}
  DynamoDB: ${file(./serverless/configs/${self:provider.stage}.yml):DynamoDB}
  VPC: ${file(./serverless/configs/${self:provider.stage}.yml):VPC}
  # load Secrets manager from AWS
  Secrets: ${ssm:/aws/reference/secretsmanager/nishinboeki/secretKey, ""}
  RdsLambdaUser: ${self:custom.Secrets.DB_LAMBDA_USERNAME, null}
  RdsDefaultUser: ${self:custom.Secrets.DB_USERNAME, "${env:DB_USERNAME}"}
  # plugins
  prune: ${file(./serverless/plugins/prune_versions.yml):prune}
  localstack: ${file(./serverless/plugins/localstack.yml):localstack}
  pythonRequirements: ${file(./serverless/plugins/python_requirements.yml):pythonRequirements}

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - "!./**"

functions:
  # Trigger by Soracom
  ChangeESimPlan: ${file(./src/handlers/change_esim_plan/function.yml):function}

  # Streams
  StreamsIOTToDynamoDB: ${file(./src/handlers/stream_iot_to_dynamodb/function.yml):function}
  StreamsIOTToRDS: ${file(./src/handlers/stream_iot_to_rds/function.yml):function}
  StreamsDynamoDBToRDS: ${file(./src/handlers/stream_dynamo_to_rds/function.yml):function}

  # Cron jobs
  LoadDisconnectedDevices: ${file(./src/handlers/load_disconnected_devices/function.yml):function}
  LoadRecoverAbsentDevices: ${file(./src/handlers/load_recover_absent_devices/function.yml):function}
  PruneStatistics: ${file(./src/handlers/prune_statistics/function.yml):function}

  # Monitors
  MonitorCase123: ${file(./src/handlers/monitors/case_1_2_3/function.yml):function}
  MonitorCase4: ${file(./src/handlers/monitors/case_4/function.yml):function}
  MonitorCase5: ${file(./src/handlers/monitors/case_5/function.yml):function}
  MonitorCase6: ${file(./src/handlers/monitors/case_6/function.yml):function}
  MonitorCase7: ${file(./src/handlers/monitors/case_7/function.yml):function}

  # Notification
  NotifyUsers: ${file(./src/handlers/notify_users/function.yml):function}

  # Update firmware version
  StartFirmwareUpdate: ${file(./src/handlers/update_firmware/start_firmware_update/function.yml):function}
  CheckFirmwareVersion: ${file(./src/handlers/update_firmware/check_firmware_version/function.yml):function}
  ConfirmFirmwareUpdate: ${file(./src/handlers/update_firmware/confirm_firmware_update/function.yml):function}

  # Testing
  DummyDynamoDBData: ${file(./src/handlers/dummy/dynamodb_data/function.yml):function}
  DummyIOTCoreData: ${file(./src/handlers/dummy/iot_core_data/function.yml):function}

resources:
  # -----------------------------------------------------------------------------
  Parameters:
    Stage:
      Type: String
      Default: ${self:provider.stage}
      AllowedValues: [ local, dev, stg, prod ]
    AutoScale:
      Type: String
      Default: ${self:custom.DynamoDB.AutoScale.Enable}
      AllowedValues: [ true, false ]
  # -----------------------------------------------------------------------------
  Conditions:
    AutoScaleCondition: !Equals [ !Ref AutoScale, true ]
  # -----------------------------------------------------------------------------
  Resources:
    # IAM
    LambdaFunctionRole: ${file(./serverless/resources/iam.yml):LambdaFunctionRole}
    LambdaFunctionPolicy: ${file(./serverless/resources/iam.yml):LambdaFunctionPolicy}
    SoracomPolicy: ${file(./serverless/resources/iam.yml):SoracomPolicy}
    IOTCoreRole: ${file(./serverless/resources/iam.yml):IOTCoreRole}
    IOTCorePolicy: ${file(./serverless/resources/iam.yml):IOTCorePolicy}

    # DynamoDB
    DynamoDBTable: ${file(./serverless/resources/dynamodb.yml):DynamoDBTable}
    ScalingRole: ${file(./serverless/resources/dynamodb.yml):ScalingRole}
    WriteScalingPolicy: ${file(./serverless/resources/dynamodb.yml):WriteScalingPolicy}
    ReadScalingPolicy: ${file(./serverless/resources/dynamodb.yml):ReadScalingPolicy}
    WriteCapacityScalableTarget: ${file(./serverless/resources/dynamodb.yml):WriteCapacityScalableTarget}
    ReadCapacityScalableTarget: ${file(./serverless/resources/dynamodb.yml):ReadCapacityScalableTarget}

    # IOT core
    # IoTLogs: ${file(./serverless/resources/iot_core.yml):IoTLogs}
    IoTRule0: ${file(./serverless/resources/iot_core.yml):IoTRule0}
    IoTRule1: ${file(./serverless/resources/iot_core.yml):IoTRule1}
    IoTRule2: ${file(./serverless/resources/iot_core.yml):IoTRule2}

    # SQS
    IOTStreamQueuePolicy: ${file(./serverless/resources/sqs.yml):IOTStreamQueuePolicy}
    MonitorQueuePolicy: ${file(./serverless/resources/sqs.yml):MonitorQueuePolicy}
    IOTStreamQueue: ${file(./serverless/resources/sqs.yml):IOTStreamQueue}
    IOTStreamDLQ: ${file(./serverless/resources/sqs.yml):IOTStreamDLQ}
    MonitorCase123Queue: ${file(./serverless/resources/sqs.yml):MonitorCase123Queue}
    MonitorCase4Queue: ${file(./serverless/resources/sqs.yml):MonitorCase4Queue}
    MonitorCase5Queue: ${file(./serverless/resources/sqs.yml):MonitorCase5Queue}
    MonitorCase6Queue: ${file(./serverless/resources/sqs.yml):MonitorCase6Queue}
    MonitorCase7Queue: ${file(./serverless/resources/sqs.yml):MonitorCase7Queue}
    MonitorDLQ: ${file(./serverless/resources/sqs.yml):MonitorDLQ}
    NotificationQueue: ${file(./serverless/resources/sqs.yml):NotificationQueue}
    NotificationDLQ: ${file(./serverless/resources/sqs.yml):NotificationDLQ}
    DynamoStreamDLQ: ${file(./serverless/resources/sqs.yml):DynamoStreamDLQ}

    # Permission
    IOTRule1LambdaPermission: ${file(./serverless/resources/lambda.yml):IOTRule1LambdaPermission}
    IOTRule2LambdaPermission: ${file(./serverless/resources/lambda.yml):IOTRule2LambdaPermission}
  # -----------------------------------------------------------------------------
  Outputs: { }
