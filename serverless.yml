service: teligent

stages:
  default:
    resolvers:
      aws-account:
        type: aws
        profile: ${self:custom.configs.Profile}
        region: ${opt:region, self:custom.configs.Region}

provider:
  name: aws
  resolver: aws-account
  stage: ${opt:stage, "neos"}
  stackName: ${self:service}-${self:provider.stage}

  # default tags for all resources
  stackTags:
    Owner: ${self:service}
    Environment: ${self:provider.stage}
  tags: ${self:provider.stackTags}

  # deployment
  deploymentBucket:
    name: ${self:custom.configs.S3.DeploymentBucket.name}
  iam:
    deploymentRole: ${self:custom.configs.IAM.DeploymentRole}

  # config lambda functions
  runtime: python3.12
  logRetentionInDays: ${self:custom.configs.Lambda.logRetentionInDays}
  memorySize: 256
  timeout: 10
  role: LambdaFunctionRole
  layers:
    - !Ref PythonRequirementsLambdaLayer

  # Default environment for lambda functions
  environment:
    STAGE: ${self:provider.stage}
    POWERTOOLS_LOG_LEVEL: ${self:custom.configs.Lambda.environment.LOG_LEVEL}
    # references to resources in this template

plugins:
  - serverless-python-requirements

useDotenv: true

custom:
  # load the configuration corresponding to a specific $stage
  configs: ${file(ops/infra/configs/${self:provider.stage}.yml)}
  # plugins
  pythonRequirements: ${file(ops/infra/plugins/python_requirements.yml):pythonRequirements}

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - "!./**"

functions:
  # API -------------------------------------------------------------------------
  # Notifiers -------------------------------------------------------------------
  SendHealthEvents: ${file(ops/infra/functions/notifiers/SendHealthEvents.yml):function}

resources:
  # -----------------------------------------------------------------------------
  Parameters:
    Stage:
      Type: String
      Default: ${self:provider.stage}
      AllowedValues: [ neos ]
  # -----------------------------------------------------------------------------
  Resources:
    # IAM
    LambdaFunctionRole: ${file(ops/infra/resources/iam.yml):LambdaFunctionRole}
    LambdaFunctionPolicy: ${file(ops/infra/resources/iam.yml):LambdaFunctionPolicy}
    # EventBridge
    MonitoringEventBus: ${file(ops/infra/resources/event_bridge.yml):MonitoringEventBus}
  # -----------------------------------------------------------------------------
  Outputs: { }
