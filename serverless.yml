service: denaribots

provider:
  name: aws
  stage: ${opt:stage, "dev"}
  region: ${opt:region, self:custom.default.region}
  stackName: ${self:service}-${self:provider.stage}

  # default tags for all resources
  tags:
    Owner: ${self:service}
    Environment: ${self:provider.stage}

  # S3 bucket where the artifact is stored
  deploymentBucket:
    name: ${file(./serverless/configs/${self:provider.stage}.yml):S3.DeploymentBucket.name}

  # config lambda functions
  runtime: python3.13
  logRetentionInDays: ${self:custom.Lambda.logRetentionInDays}
  memorySize: 256
  timeout: 10
  role: LambdaFunctionRole
  layers:
    - !Ref PythonRequirementsLambdaLayer

  # Default environment for lambda functions
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    LOG_LEVEL: ${self:custom.Lambda.environment.LOG_LEVEL}

    # references to resources in this template
    DYNAMODB_TABLE: !Ref DynamoDBTable

plugins: ${file(./serverless/configs/${self:provider.stage}.yml):plugins}
useDotenv: true

custom:
  # load the configuration coresponding to a specific $stage
  default: ${file(./serverless/configs/${self:provider.stage}.yml):default}
  Lambda: ${file(./serverless/configs/${self:provider.stage}.yml):Lambda}
  DynamoDB: ${file(./serverless/configs/${self:provider.stage}.yml):DynamoDB}
  VPC: ${file(./serverless/configs/${self:provider.stage}.yml):VPC}
  # load Secrets manager from AWS
  Secrets: ${ssm:/aws/reference/secretsmanager/nishinboeki/secretKey, ""}
  # plugins
  prune: ${file(./serverless/plugins/prune_versions.yml):prune}
  localstack: ${file(./serverless/plugins/localstack.yml):localstack}
  pythonRequirements: ${file(./serverless/plugins/python_requirements.yml):pythonRequirements}

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - "!./**"

functions:
  # Testing
  DummyDynamoDBData: ${file(./src/handlers/dummy/dynamodb_data/function.yml):function}

resources:
  # -----------------------------------------------------------------------------
  Parameters:
    Stage:
      Type: String
      Default: ${self:provider.stage}
      AllowedValues: [ local, dev, stg, prod ]
    AutoScale:
      Type: String
      Default: ${self:custom.DynamoDB.AutoScale.Enable}
      AllowedValues: [ true, false ]
  # -----------------------------------------------------------------------------
  Conditions:
    AutoScaleCondition: !Equals [ !Ref AutoScale, true ]
  # -----------------------------------------------------------------------------
  Resources:
    # IAM
    LambdaFunctionRole: ${file(./serverless/resources/iam.yml):LambdaFunctionRole}
    LambdaFunctionPolicy: ${file(./serverless/resources/iam.yml):LambdaFunctionPolicy}

    # DynamoDB
    DynamoDBTable: ${file(./serverless/resources/dynamodb.yml):DynamoDBTable}
    ScalingRole: ${file(./serverless/resources/dynamodb.yml):ScalingRole}
    WriteScalingPolicy: ${file(./serverless/resources/dynamodb.yml):WriteScalingPolicy}
    ReadScalingPolicy: ${file(./serverless/resources/dynamodb.yml):ReadScalingPolicy}
    WriteCapacityScalableTarget: ${file(./serverless/resources/dynamodb.yml):WriteCapacityScalableTarget}
    ReadCapacityScalableTarget: ${file(./serverless/resources/dynamodb.yml):ReadCapacityScalableTarget}

    # Permission
    IOTRule1LambdaPermission: ${file(./serverless/resources/lambda.yml):IOTRule1LambdaPermission}
    IOTRule2LambdaPermission: ${file(./serverless/resources/lambda.yml):IOTRule2LambdaPermission}
  # -----------------------------------------------------------------------------
  Outputs: { }
