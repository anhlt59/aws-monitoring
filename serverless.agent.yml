service: teligent-agent

stages:
  default:
    resolvers:
      aws-account:
        type: aws
        profile: ${self:custom.stackConfigs.Profile}
        region: ${opt:region, self:custom.stackConfigs.Region}

provider:
  name: aws
  resolver: aws-account
  stage: ${opt:stage, "neos"}
  stackName: ${self:service}-${self:provider.stage}

  # default tags for all resources
  stackTags:
    Owner: ${self:service}
    Environment: ${self:provider.stage}
  tags: ${self:provider.stackTags}

  # deployment
  deploymentBucket:
    name: ${self:custom.stackConfigs.S3.DeploymentBucket.Name}
  iam:
    deploymentRole: ${self:custom.stackConfigs.IAM.DeploymentRole}

  # config lambda functions
  runtime: python3.12
  logRetentionInDays: ${self:custom.stackConfigs.Lambda.LogRetentionInDays}
  memorySize: 256
  timeout: 10
  role: LambdaFunctionRole
  layers:
    - !Ref PythonRequirementsLambdaLayer

  # Default environment for lambda functions
  environment:
    STAGE: ${self:provider.stage}
    POWERTOOLS_LOG_LEVEL: ${self:custom.stackConfigs.Lambda.Environment.LOG_LEVEL}
    # references to resources in this template

plugins:
  - serverless-plugin-utils
  - serverless-python-requirements

useDotenv: true

custom:
  # load the configuration corresponding to a specific $stage
  stackConfigs: ${file(infra/agent/configs/${self:provider.stage}.yml)}
  monitoringConfigs: ${file(infra/agent/configs/${self:provider.stage}.yml):MonitoringConfigs}
  # plugins
  pythonRequirements: ${file(infra/agent/plugins/python_requirements.yml):pythonRequirements}

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - "!./**"

functions:
  QueryErrorLogs: ${file(infra/agent/functions/QueryErrorLogs.yml):function}

resources:
  # -----------------------------------------------------------------------------
  Parameters:
    Stage:
      Type: String
      Default: ${self:provider.stage}
      AllowedValues: [neos]
  # -----------------------------------------------------------------------------
  Resources:
    # IAM
    LambdaFunctionRole: ${file(infra/agent/resources/iam.yml):LambdaFunctionRole}
    LambdaFunctionPolicy: ${file(infra/agent/resources/iam.yml):LambdaFunctionPolicy}
    EventBridgeRole: ${file(infra/agent/resources/iam.yml):EventBridgeRole}
    EventBridgePolicy: ${file(infra/agent/resources/iam.yml):EventBridgePolicy}
    # EventBridge
    HealthEventRule: ${file(infra/agent/resources/event_bridge.yml):HealthEventRule}
    GuardDutyEventRule: ${file(infra/agent/resources/event_bridge.yml):GuardDutyEventRule}
  # -----------------------------------------------------------------------------
  Outputs: {}
